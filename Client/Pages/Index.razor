@page "/"
@inject HttpClient Http

<PageTitle>Index</PageTitle>
@if (pokeNames == null)
{
    <MudText>Loading...</MudText>
}
else
{
    <MudGrid Class="mx-4 my-6">
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h5" Class="mb-1">自分のパーティ</MudText>
            <MudGrid>
                @foreach (var pokeInfo in myParty)
                {
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string" Label="ポケモン" Value="@pokeInfo.Name" ValueChanged="@( async(value) => await HandlePokeSelected(value, pokeInfo))" SearchFunc="@( async(value) => HandlePokeSearchFunc(value))" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <PokeImageView PokeNo="@pokeInfo.No" Width="42" Height="42" />
                        <PokeTypeView PokeType="@pokeInfo.FirstType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                        <PokeTypeView PokeType="@pokeInfo.SecondType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                    </MudItem>                    
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h5" Class="mb-1">相手のパーティ</MudText>
            <MudGrid>
                @foreach (var pokeInfo in yourParty)
                {
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string" Label="ポケモン" Value="@pokeInfo.Name" ValueChanged="@( async(value) => await HandlePokeSelected(value, pokeInfo))" SearchFunc="@( async(value) => HandlePokeSearchFunc(value))" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <PokeImageView PokeNo="@pokeInfo.No" Width="42" Height="42" />
                        <PokeTypeView PokeType="@pokeInfo.FirstType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                        <PokeTypeView PokeType="@pokeInfo.SecondType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                    </MudItem>
                }
            </MudGrid>
        </MudItem>            
    </MudGrid>
    <MudGrid Class="mx-4 my-6">
        <MudItem xs="12">
            <MudText Typo="Typo.h5">種族値</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                @foreach (var pokeInfo in myParty)
                {
                    <MudItem xs="12" sm="6">
                        <PokeBaseStatsView PokeNo="@pokeInfo.No" PokeName="@pokeInfo.Name" H="@pokeInfo.H" A="@pokeInfo.A" B="@pokeInfo.B" C="@pokeInfo.C" D="@pokeInfo.D" S="@pokeInfo.S" Color="@Color.Info"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                @foreach (var pokeInfo in yourParty)
                {
                    <MudItem xs="12" sm="6">
                        <PokeBaseStatsView PokeNo="@pokeInfo.No" PokeName="@pokeInfo.Name" H="@pokeInfo.H" A="@pokeInfo.A" B="@pokeInfo.B" C="@pokeInfo.C" D="@pokeInfo.D" S="@pokeInfo.S" Color="@Color.Secondary"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
    <MudGrid Class="mx-4 my-6">
        <MudItem xs="12">
            <MudText Typo="Typo.h5">S実数値</MudText>
        </MudItem>
        <MudItem xs="12">
            <PokeSpeedRealNumberChart MyParty="@myParty" YourParty="@yourParty" />
        </MudItem>
    </MudGrid>
    <MudGrid Class="mx-4 my-6">
        <MudItem xs="12">
            <MudText Typo="Typo.h5">タイプ相性</MudText>
        </MudItem>
        <MudItem xs="12">
            <PokeTypeEffectiveView Party="@myParty"/>
        </MudItem>
        <MudItem xs="12">
            <PokeTypeEffectiveView Party="@yourParty" />
        </MudItem>
    </MudGrid>
}   
@code {
    /// <summary>
    /// 全てのポケモンの名前のリスト
    /// </summary>
    private string[] pokeNames = Array.Empty<string>();

    /// <summary>
    /// 自分のパーティ
    /// </summary>
    private PokeInfoModel[] myParty = new PokeInfoModel[6]
    {
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel()
    };

    /// <summary>
    /// 相手のパーティ
    /// </summary>
    private PokeInfoModel[] yourParty = new PokeInfoModel[6]
    {
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel(),
        new PokeInfoModel()
    };

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // 全てのポケモンの名前を取得
        pokeNames = await Http.GetFromJsonAsync<string[]>("api/PokeNames") ?? Array.Empty<string>();
    }

    /// <summary>
    /// ポケコンボボックスのリスト表示をするためのコールバック用
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private IEnumerable<string> HandlePokeSearchFunc(string value)
    {
        // テキストがなければ一覧を全て返す。あれば一致するものを抽出して返す。
        if (string.IsNullOrEmpty(value))
        {
            return pokeNames;
        }
        else
        {
            return pokeNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }       
    }

    /// <summary>
    /// ポケコンボボックスで選択されたときのイベントコールバック用
    /// </summary>
    /// <param name="selectedValue"></param>
    /// <param name="pokeInfo"></param>
    /// <returns></returns>
    private async Task HandlePokeSelected(string selectedValue, PokeInfoModel pokeInfo)
    {
        // 初期化
        pokeInfo.Name = selectedValue;
        pokeInfo.No = 0;
        pokeInfo.FirstType = string.Empty;
        pokeInfo.SecondType = string.Empty;
        pokeInfo.H = 0;
        pokeInfo.A = 0;
        pokeInfo.B = 0;
        pokeInfo.C = 0;
        pokeInfo.D = 0;
        pokeInfo.S = 0;
        pokeInfo.Total = 0;

        // 選択が解除されていた場合、なにもしない
        if (string.IsNullOrEmpty(pokeInfo.Name))
        {
            return;
        }

        // No、タイプを取得
        PokeTypeModel? types = await Http.GetFromJsonAsync<PokeTypeModel>($"api/PokeTypes?name={pokeInfo.Name}");
        if (types is not null)
        {
            pokeInfo.No = types.No;
            pokeInfo.FirstType = types.FirstType;
            pokeInfo.SecondType = types.SecondType;
        }

        // 種族値を取得
        PokeBaseStatsModel? baseStats = await Http.GetFromJsonAsync<PokeBaseStatsModel>($"api/PokeBaseStats?name={pokeInfo.Name}&generation={Common.CurrentGeneration}");
        if (baseStats is not null)
        {
            pokeInfo.H = baseStats.H;
            pokeInfo.A = baseStats.A;
            pokeInfo.B = baseStats.B;
            pokeInfo.C = baseStats.C;
            pokeInfo.D = baseStats.D;
            pokeInfo.S = baseStats.S;
            pokeInfo.Total = baseStats.Total;
        }
    }
}